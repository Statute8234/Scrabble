import pygame
import pygame.sprite
# ---------------
import nltk
import string
import random, time, sys
from nltk.corpus import wordnet
nltk.download('wordnet')
# screen
pygame.init()
screenWidth, screenHeight = 766, 784
screen = pygame.display.set_mode((screenWidth, screenHeight))
pygame.display.set_caption("Scrabble")
clock = pygame.time.Clock()
pygame.display.flip()
# color
def RANDOM_COLOR():
    return (random.randint(0,255),random.randint(0,255),random.randint(0,255))
RED = (255, 0, 0)
GREEN = (0, 255, 0)
BLUE = (0, 0, 255)
WHITE = (255, 255, 255)
BLACK = (0,0,0)
DARK_GRAY = (169,169,169)
SPACE_COLOR = (220,205,173,255)
PINK = (255,192,203)
LIGHT_BLUE = (173,216,230)
GOLD = (255,215,0)
YELLOW = (255,255,0)
# text
class Text:
    def __init__(self, text, font_size, color, position):
        self.text = text
        self.font_size = font_size
        self.color = color
        self.position = position
        self.font = pygame.font.Font(None, self.font_size)  # You can specify a font file or use None for default font
        self.rendered_text = None

    def update(self, new_text):
        self.text = new_text
        self.rendered_text = None  # Clear the rendered text to update it

    def render(self, screen):
        if self.rendered_text is None:
            self.rendered_text = self.font.render(self.text, True, self.color)
        text_width, text_height = self.rendered_text.get_size()
        x = self.position[0] - text_width // 2
        y = self.position[1]
        screen.blit(self.rendered_text, (x, y))
Title = Text("Scrabble",40,BLACK,((screenWidth // 2), 10))
letters = []
letter_values = {
    'A': 1, 'B': 3, 'C': 3, 'D': 2, 'E': 1, 'F': 4, 'G': 2, 'H': 4,
    'I': 1, 'J': 8, 'K': 5, 'L': 1, 'M': 3, 'N': 1, 'O': 1, 'P': 3,
    'Q': 10, 'R': 1, 'S': 1, 'T': 1, 'U': 1, 'V': 4, 'W': 4, 'X': 8,
    'Y': 4, 'Z': 10, "_": 2
}
letter_list = string.ascii_uppercase + "_"
for y, letter in enumerate(letter_list):
    value = letter_values.get(letter, 0)
    text = Text(f"{letter}: {value}", 20, BLACK, (20, (y * 15) + 10))
    letters.append(text)
spellWord = Text("Current Word:",20,BLACK,(screenWidth / 2, screenHeight - 125))
points = Text("Points: ", 20, WHITE, (screenWidth - 100, screenHeight - 125))
# wrap text
class WrapText:
    def __init__(self, text, font_size, color, position, max_width):
        self.text = text
        self.font_size = font_size
        self.max_width = max_width
        self.font = pygame.font.Font(None, self.font_size)
        self.lines = self.wrap_text()
        self.color = color
        self.position = position

    def wrap_text(self):
        words = self.text.split()
        lines = []
        current_line = []
        for word in words:
            if self.font.size(' '.join(current_line + [word]))[0] <= self.max_width:
                current_line.append(word)
            else:
                lines.append(' '.join(current_line))
                current_line = [word]
        lines.append(' '.join(current_line))
        return lines

    def update_text(self, new_text):
        self.text = new_text
        self.lines = self.wrap_text()

    def render(self, screen):
        for i, line in enumerate(self.lines):
            text_surface = self.font.render(line, True, self.color)
            screen.blit(text_surface, (self.position[0], self.position[1] + i * self.font.get_linesize()))
definitionText = WrapText("Definition: ",17,BLACK,(10, screenHeight - 105), screenWidth - 10)
# bord buttons
class BordButton:
    def __init__(self, x, y, width, height, active_color, inactive_color, outline_color, text=None):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.active_color = active_color
        self.inactive_color = inactive_color
        self.rect = pygame.Rect(x, y, width, height)
        self.color = self.inactive_color
        self.outline_color = outline_color
        self.hovered = False
        self.wordSpace = False
        self.text = text
        self.origional_text = text
        self.textColor = BLACK
        self.font = pygame.font.Font(None, 24)
        if self.text is not None:
            self.textColor = BLACK
            self.font_size = min(self.width // len(self.text) - 10, self.height)
            self.font = pygame.font.Font(None, self.font_size)
        self.clicked = False

    def draw(self, surface):
        pygame.draw.rect(surface, self.color, self.rect)
        pygame.draw.rect(surface, self.outline_color, self.rect, 2)

        if self.text:
            text_surface = self.font.render(self.text, True, self.textColor)
            text_rect = text_surface.get_rect(center=self.rect.center)
            surface.blit(text_surface, text_rect)

    def handle_event(self, event):
        mouse_pos = pygame.mouse.get_pos()
        if self.x < mouse_pos[0] < self.x + self.width and self.y < mouse_pos[1] < self.y + self.height:
            self.color = self.active_color
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    self.clicked = True
                    self.color = self.active_color
        else:
            self.color = self.inactive_color
                
    def reset(self):
        self.clicked = False
        self.color = self.color
# color space
def ColorSpace(x, y):
    if (x == 0 or x == 14) and (y == 0 or y == 14):
        return "3_W"
    if (x == 0 or x == 14) and (y == 14 / 2):
        return "3_W"
    if (x == 14 / 2) and (y == 0 or y == 14):
        return "3_W"
    if (x, y) in [(13, 1), (12, 2), (11, 3), (10, 4)] or (x, y) in [(1, 1), (2, 2), (3, 3), (4, 4)]:
        return "2_W"
    if (x, y) in [(1, 13), (2, 12), (3, 11), (4, 10)] or (x, y) in [(13, 13), (12, 12), (11, 11), (10, 10)]:
        return "2_W"
    if (x, y) in [(5, 5), (9, 5), (5, 9), (9, 9)] or (x, y) in [(1, 9), (1, 5), (5, 13), (9, 13)] or (x, y) in [(13, 9), (13, 5), (5, 1), (9, 1)]:
        return "3_L"
    if (x, y) in [(0, 3), (0, 11), (2, 6), (2, 8), (3, 7), (6, 6)] or (x, y) in [(3, 14), (11, 14), (6, 12), (8, 12), (7, 11), (6, 8)]:
        return "2_L"
    if (x, y) in [(14, 3), (14, 11), (12, 6), (12, 8), (11, 7)] or (x, y) in [(3, 0), (11, 0), (6, 2), (8, 2), (7, 3), (8, 6), (8, 8)]:
        return "2_L"
    if (x == 14 / 2) and (y == 14 / 2):
        return "S"
    return False
# space
bord_list = []
button_width = 40
button_height = 40
board_width = 15 * button_width
start_x = (screenWidth - board_width) // 2
for x in range(15):
    for y in range(15):
        bordbutton = BordButton(start_x + (x * button_width), (y * button_height) + 40, button_width, button_height, GREEN, SPACE_COLOR, WHITE)
        if ColorSpace(x, y) == "3_W":
            bordbutton.inactive_color = RED
            bordbutton.text = "3W"
        if ColorSpace(x, y) == "2_W":
            bordbutton.inactive_color = PINK
            bordbutton.text = "2W"
        if ColorSpace(x, y) == "3_L":
            bordbutton.inactive_color = BLUE
            bordbutton.text = "3L"
        if ColorSpace(x, y) == "2_L":
            bordbutton.inactive_color = LIGHT_BLUE
            bordbutton.text = "2L"
        if ColorSpace(x, y) == "S":
            bordbutton.inactive_color = GOLD
            bordbutton.text = "S"
        bord_list.append(bordbutton)
# button
class Button:
    def __init__(self, x, y, width, height, text, active_color, inactive_color, outlineSize):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.active_color = active_color
        self.inactive_color = inactive_color
        self.color = self.inactive_color
        self.ready = False
        self.textColor = BLACK
        self.font_size = min(self.width // len(self.text) - 10, self.height)
        self.font = pygame.font.Font(None, self.font_size)
        self.clicked = False
        self.outlineSize = outlineSize

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height), self.outlineSize)
        text_surface = self.font.render(self.text, True, self.textColor)
        text_rect = text_surface.get_rect(center=(self.x + self.width // 2, self.y + self.height // 2))
        screen.blit(text_surface, text_rect)
    
    def handle_event(self, event):
        mouse_pos = pygame.mouse.get_pos()
        if self.x < mouse_pos[0] < self.x + self.width and self.y < mouse_pos[1] < self.y + self.height:
            self.color = self.active_color
            if event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    self.clicked = True
                    self.color = self.active_color
        else:
            self.color = self.inactive_color

    def reset(self):
        self.clicked = False
        self.color = self.inactive_color
skip_turn = Button(screenWidth - 150, screenHeight - 60, 100, 50, "Skip", RED, WHITE, 0)
# letter in hand
items_to_remove = [] 
letter_list = []
for x in range(7):
    lestters = Button((x * 60) + 155, screenHeight - 60, 50, 50, random.choice(string.ascii_uppercase + "_"), GREEN, BLACK, 1)
    letter_list.append(lestters)
# define words
def get_word_definition(word):
    synsets = wordnet.synsets(word)
    if synsets:
        synset = synsets[0]
        definition = synset.definition()
        return definition
    else:
        return "None"
# loop
currentWord = "Current Word: "
checkWord = ""
currentDef = "Definition: "
wordIndex = 0
skippedTurns = 0
totalPoints = 0
running = True
while running:
    events = pygame.event.get()
    for event in events:
        if event.type == pygame.QUIT:
            running = False
            sys.exit()
        elif event.type == pygame.VIDEORESIZE:
            screenWidth, screenHeight = event.size
        # handle skip button
        if skippedTurns < 3:
            skip_turn.handle_event(event)
            if skip_turn.clicked:
                skippedTurns += 1
                skip_turn.reset()
            # handle hand letters
            for handLetter in letter_list:
                handLetter.handle_event(event)
                if handLetter.color == handLetter.active_color:
                    handLetter.textColor = handLetter.active_color
                else:
                    handLetter.textColor = handLetter.inactive_color
                if handLetter.clicked:
                    if handLetter.y == screenHeight - 60:
                        handLetter.y -= 10
                        checkWord += handLetter.text
                        handLetter.ready = True
                    else:
                        handLetter.y = screenHeight - 60
                        index = checkWord.find(handLetter.text)
                        if index != -1:
                            checkWord = checkWord[:index] + checkWord[index+1:]
                        handLetter.ready = False
                    currentWord = "Current Word: " + checkWord
                    handLetter.reset()
    # handle board events
    if skippedTurns < 3:
        for bordbutton in bord_list:
            bordbutton.handle_event(event)
            if bordbutton.clicked and not bordbutton.wordSpace:
                bordbutton.clicked = False
                if wordIndex < len(checkWord) > 1 and wordnet.synsets(checkWord.lower()):
                    bordbutton.wordSpace = True
                    bordbutton.inactive_color = YELLOW
                    bordbutton.text = checkWord[wordIndex]
                    totalPoints += letter_values.get(checkWord[wordIndex], 1)
                    points.update("Points: " + str(totalPoints))
                    wordIndex += 1
                else:
                    for index, item in enumerate(letter_list):
                        if item.ready:
                            new_letter = Button(item.x, screenHeight - 60, 50, 50, random.choice(string.ascii_uppercase), GREEN, BLACK, 1)
                            letter_list[index] = new_letter
                            new_letter.reset()
                    checkWord = ""
                    currentWord = "Current Word: " + checkWord
                    wordIndex = 0
    screen.fill(DARK_GRAY)
    # show letters
    Title.render(screen)
    for letter in letters:
        letter.render(screen)
    # show bord
    for bordbutton in bord_list:
        bordbutton.draw(screen)
    # show letters in hand 
    for handLetter in letter_list:
        handLetter.draw(screen)
    if len(checkWord.lower()) > 1 and wordnet.synsets(checkWord.lower()):
        spellWord.color = WHITE
        definitionText.update_text(currentDef + get_word_definition(checkWord.lower()))
    else:
        spellWord.color = BLACK
        currentDef = "Definition: "
        definitionText.update_text(currentDef)
    # text
    spellWord.update(currentWord)
    spellWord.render(screen)
    definitionText.render(screen)
    points.render(screen)
    if skippedTurns == 3:
        Title.update("End Game")
    # skip
    skip_turn.draw(screen)
    # update
    pygame.display.flip()
    pygame.display.update()
    clock.tick(64)
